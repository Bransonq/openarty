////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	OpenArty, an entirely open SoC based upon the Arty platform
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . global.txt bkram.txt buserr.txt dlyarbiter.txt clock.txt gpio.txt spio.txt icape.txt mdio.txt gps.txt eqspi.txt pic.txt pwrcount.txt rtcdate.txt rtcgps.txt clrspio.txt version.txt wbuconsole.txt zipmaster.txt sdspi.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017-2018, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// SDSPI Debugging scope
#define	R_SDSPI_SCOPC   	0x00100000	// 00100000, wbregs names: SDSCOPC, SDSCOPE
#define	R_SDSPI_SCOPD   	0x00100004	// 00100000, wbregs names: SDSCOPD
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP    	0x00200000	// 00200000, wbregs names: GPSSETUP
#define	R_GPSU_FIFO     	0x00200004	// 00200000, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX   	0x00200008	// 00200000, wbregs names: GPSRX
#define	R_GPSU_UARTTX   	0x0020000c	// 00200000, wbregs names: GPSTX
// SD-SPI addresses
#define	R_SDSPI_CTRL    	0x00300000	// 00300000, wbregs names: SDCARD
#define	R_SDSPI_DATA    	0x00300004	// 00300000, wbregs names: SDDATA
#define	R_SDSPI_FIFOA   	0x00300008	// 00300000, wbregs names: SDFIFOA, SDFIF0, SDFIFA
#define	R_SDSPI_FIFOB   	0x0030000c	// 00300000, wbregs names: SDFIFOB, SDFIF1, SDFIFB
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x00400004	// 00400000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x00400008	// 00400000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0040000c	// 00400000, wbregs names: TX
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA     	0x00500000	// 00500000, wbregs names: ALPHA
#define	R_GPS_BETA      	0x00500004	// 00500000, wbregs names: BETA
#define	R_GPS_GAMMA     	0x00500008	// 00500000, wbregs names: GAMMA
#define	R_GPS_STEP      	0x0050000c	// 00500000, wbregs names: STEP
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA     	0x00500000	// 00500000, wbregs names: ALPHA
#define	R_GPS_BETA      	0x00500004	// 00500000, wbregs names: BETA
#define	R_GPS_GAMMA     	0x00500008	// 00500000, wbregs names: GAMMA
#define	R_GPS_STEP      	0x0050000c	// 00500000, wbregs names: STEP
// RTC clock registers
#define	R_CLOCK         	0x00500010	// 00500010, wbregs names: CLOCK
#define	R_TIMER         	0x00500014	// 00500010, wbregs names: TIMER
#define	R_STOPWATCH     	0x00500018	// 00500010, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0050001c	// 00500010, wbregs names: ALARM, CKALARM
// RTC clock registers
#define	R_CLOCK         	0x00500010	// 00500010, wbregs names: CLOCK
#define	R_TIMER         	0x00500014	// 00500010, wbregs names: TIMER
#define	R_STOPWATCH     	0x00500018	// 00500010, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0050001c	// 00500010, wbregs names: ALARM, CKALARM
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ    	0x00500020	// 00500020, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP    	0x00500024	// 00500020, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI   	0x00500028	// 00500020, wbregs names: ERRHI
#define	R_GPSTB_ERRLO   	0x0050002c	// 00500020, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI 	0x00500030	// 00500020, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO 	0x00500034	// 00500020, wbregs names: CNTLO
#define	R_GPSTB_STEPHI  	0x00500038	// 00500020, wbregs names: STEPHI
#define	R_GPSTB_STEPLO  	0x0050003c	// 00500020, wbregs names: STEPLO
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ    	0x00500020	// 00500020, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP    	0x00500024	// 00500020, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI   	0x00500028	// 00500020, wbregs names: ERRHI
#define	R_GPSTB_ERRLO   	0x0050002c	// 00500020, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI 	0x00500030	// 00500020, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO 	0x00500034	// 00500020, wbregs names: CNTLO
#define	R_GPSTB_STEPHI  	0x00500038	// 00500020, wbregs names: STEPHI
#define	R_GPSTB_STEPLO  	0x0050003c	// 00500020, wbregs names: STEPLO
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC       	0x00600000	// 00600000, wbregs names: FPGACRC
#define	R_CFG_FAR       	0x00600004	// 00600000, wbregs names: FPGAFAR
#define	R_CFG_FDRI      	0x00600008	// 00600000, wbregs names: FPGAFDRI
#define	R_CFG_FDRO      	0x0060000c	// 00600000, wbregs names: FPGAFDRO
#define	R_CFG_CMD       	0x00600010	// 00600000, wbregs names: FPGACMD
#define	R_CFG_CTL0      	0x00600014	// 00600000, wbregs names: FPGACTL0
#define	R_CFG_MASK      	0x00600018	// 00600000, wbregs names: FPGAMASK
#define	R_CFG_STAT      	0x0060001c	// 00600000, wbregs names: FPGASTAT
#define	R_CFG_LOUT      	0x00600020	// 00600000, wbregs names: FPGALOUT
#define	R_CFG_COR0      	0x00600024	// 00600000, wbregs names: FPGACOR0
#define	R_CFG_MFWR      	0x00600028	// 00600000, wbregs names: FPGAMFWR
#define	R_CFG_CBC       	0x0060002c	// 00600000, wbregs names: FPGACBC
#define	R_CFG_IDCODE    	0x00600030	// 00600000, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS      	0x00600034	// 00600000, wbregs names: FPGAAXSS
#define	R_CFG_COR1      	0x00600038	// 00600000, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR    	0x00600040	// 00600000, wbregs names: WBSTAR
#define	R_CFG_TIMER     	0x00600044	// 00600000, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS   	0x00600058	// 00600000, wbregs names: BOOTSTS
#define	R_CFG_CTL1      	0x00600060	// 00600000, wbregs names: FPGACTL1
#define	R_CFG_BSPI      	0x0060007c	// 00600000, wbregs names: FPGABSPI
// FLASH erase/program configuration registers
#define	R_QSPI_EREG     	0x00700000	// 00700000, wbregs names: QSPIEREG, QSPIE
#define	R_QSPI_STAT     	0x00700004	// 00700000, wbregs names: QSPIS
#define	R_QSPI_NVCONF   	0x00700008	// 00700000, wbregs names: QSPIINVCF, QSPIINV
#define	R_QSPI_VCONF    	0x0070000c	// 00700000, wbregs names: QSPIVCNF, QSPIV
#define	R_QSPI_EVCONF   	0x00700010	// 00700000, wbregs names: QSPIEVCF, QSPIEV
#define	R_QSPI_LOCK     	0x00700014	// 00700000, wbregs names: QSPILOCK
#define	R_QSPI_FLAG     	0x00700018	// 00700000, wbregs names: QSPIFLAG
#define	R_QSPI_ID       	0x00700020	// 00700000, wbregs names: QSPIID
#define	R_QSPI_IDA      	0x00700024	// 00700000, wbregs names: QSPIIDA
#define	R_QSPI_IDB      	0x00700028	// 00700000, wbregs names: QSPIIDB
#define	R_QSPI_IDC      	0x0070002c	// 00700000, wbregs names: QSPIIDC
#define	R_QSPI_IDD      	0x00700030	// 00700000, wbregs names: QSPIIDD
#define	R_QSPI_OTPWP    	0x0070003c	// 00700000, wbregs names: QSPIOTPWP
#define	R_QSPI_OTP      	0x00700040	// 00700000, wbregs names: QSPIOTP
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR     	0x00800000	// 00800000, wbregs names: BMCR
#define	R_MDIO_BMSR     	0x00800004	// 00800000, wbregs names: BMSR
#define	R_MDIO_PHYIDR1  	0x00800008	// 00800000, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2  	0x0080000c	// 00800000, wbregs names: PHYIDR2
#define	R_MDIO_ANAR     	0x00800010	// 00800000, wbregs names: ANAR
#define	R_MDIO_ANLPAR   	0x00800014	// 00800000, wbregs names: ANLPAR
#define	R_MDIO_ANER     	0x00800018	// 00800000, wbregs names: ANER
#define	R_MDIO_ANNPTR   	0x0080001c	// 00800000, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS   	0x00800040	// 00800000, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR    	0x00800050	// 00800000, wbregs names: FCSCR
#define	R_MDIO_RECR     	0x00800054	// 00800000, wbregs names: RECR
#define	R_MDIO_PCSR     	0x00800058	// 00800000, wbregs names: PCSR
#define	R_MDIO_RBR      	0x0080005c	// 00800000, wbregs names: RBR
#define	R_MDIO_LEDCR    	0x00800060	// 00800000, wbregs names: LEDCR
#define	R_MDIO_PHYCR    	0x00800064	// 00800000, wbregs names: PHYCR
#define	R_MDIO_BTSCR    	0x00800068	// 00800000, wbregs names: BTSCR
#define	R_MDIO_CDCTRL   	0x0080006c	// 00800000, wbregs names: CDCTRL
#define	R_MDIO_EDCR     	0x00800074	// 00800000, wbregs names: EDCR
#define	R_BUSERR        	0x00900000	// 00900000, wbregs names: BUSERR
#define	R_BUSERR        	0x00900000	// 00900000, wbregs names: BUSERR
#define	R_PIC           	0x00900010	// 00900010, wbregs names: PIC
#define	R_PIC           	0x00900010	// 00900010, wbregs names: PIC
#define	R_GPIO          	0x00900020	// 00900020, wbregs names: GPIO, GPI, GPO
#define	R_GPIO          	0x00900020	// 00900020, wbregs names: GPIO, GPI, GPO
#define	R_PWRCOUNT      	0x00900030	// 00900030, wbregs names: PWRCOUNT
#define	R_PWRCOUNT      	0x00900030	// 00900030, wbregs names: PWRCOUNT
#define	R_RTCDATE       	0x00900040	// 00900040, wbregs names: RTCDATE, DATE
#define	R_RTCDATE       	0x00900040	// 00900040, wbregs names: RTCDATE, DATE
#define	R_SPIO          	0x00900050	// 00900050, wbregs names: SPIO
#define	R_SPIO          	0x00900050	// 00900050, wbregs names: SPIO
#define	R_VERSION       	0x00900060	// 00900060, wbregs names: VERSION
#define	R_VERSION       	0x00900060	// 00900060, wbregs names: VERSION
#define	R_CLRLED        	0x00900070	// 00900070, wbregs names: CLRLED
#define	R_CLRLED0       	0x00900070	// 00900070, wbregs names: CLRLED0, CLR0
#define	R_CLRLED1       	0x00900074	// 00900070, wbregs names: CLRLED1, CLR1
#define	R_CLRLED2       	0x00900078	// 00900070, wbregs names: CLRLED2, CLR2
#define	R_CLRLED3       	0x0090007c	// 00900070, wbregs names: CLRLED3, CLR3
#define	R_CLRLED        	0x00900070	// 00900070, wbregs names: CLRLED
#define	R_CLRLED0       	0x00900070	// 00900070, wbregs names: CLRLED0, CLR0
#define	R_CLRLED1       	0x00900074	// 00900070, wbregs names: CLRLED1, CLR1
#define	R_CLRLED2       	0x00900078	// 00900070, wbregs names: CLRLED2, CLR2
#define	R_CLRLED3       	0x0090007c	// 00900070, wbregs names: CLRLED3, CLR3
#define	R_BKRAM         	0x00a00000	// 00a00000, wbregs names: RAM
#define	R_FLASH         	0x01000000	// 01000000, wbregs names: FLASH, EQSPIFLASH


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	R_ZIPCTRL	0x02000000
#define	R_ZIPDATA	0x02000004
// #define	RESET_ADDRESS	0x01400000
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
#define	BKRAMBASE	0x00a00000
#define	BKRAMLEN	0x00100000
#define	R_ICONTROL	R_PIC
#define	ISPIF_EN	0x00020002
#define	ISPIF_DIS	0x00020002
#define	ISPIF_CLR	0x00000002

#define	FLASHBASE	0x01000000
#define	FLASHLEN	0x01000000
#define	FLASHLGLEN	24
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f

#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS 0x01400000
#elif	defined(SDRAM_ACCESS)
#define	RESET_ADDRESS @$[0x%08x](sdram.REGBASE)
#elif	defined(BKRAM_ACCESS)
#define	RESET_ADDRESS 0x00a00000
#endif

// @REGDEFS.H.INSERT for peripherals
// Flash control constants
#define	ERASEFLAG	0xc00001be
#define	DISABLEWP	0x40000000
#define	ENABLEWP	0x00000000

#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
