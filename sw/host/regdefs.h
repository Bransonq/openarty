////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	OpenArty, an entirely open SoC based upon the Arty platform
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . global.txt bkram.txt buserr.txt dlyarbiter.txt clock.txt gpio.txt spio.txt icape.txt mdio.txt gps.txt pic.txt pwrcount.txt rtcdate.txt rtcgps.txt clrspio.txt version.txt wbuconsole.txt zipmaster.txt sdspi.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017-2018, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// SDSPI Debugging scope
#define	R_SDSPI_SCOPC   	0x00010000	// 00010000, wbregs names: SDSCOPC, SDSCOPE
#define	R_SDSPI_SCOPD   	0x00010004	// 00010000, wbregs names: SDSCOPD
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP    	0x00020000	// 00020000, wbregs names: GPSSETUP
#define	R_GPSU_FIFO     	0x00020004	// 00020000, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX   	0x00020008	// 00020000, wbregs names: GPSRX
#define	R_GPSU_UARTTX   	0x0002000c	// 00020000, wbregs names: GPSTX
// SD-SPI addresses
#define	R_SDSPI_CTRL    	0x00030000	// 00030000, wbregs names: SDCARD
#define	R_SDSPI_DATA    	0x00030004	// 00030000, wbregs names: SDDATA
#define	R_SDSPI_FIFOA   	0x00030008	// 00030000, wbregs names: SDFIFOA, SDFIF0, SDFIFA
#define	R_SDSPI_FIFOB   	0x0003000c	// 00030000, wbregs names: SDFIFOB, SDFIF1, SDFIFB
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x00040004	// 00040000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x00040008	// 00040000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0004000c	// 00040000, wbregs names: TX
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA     	0x00050000	// 00050000, wbregs names: ALPHA
#define	R_GPS_BETA      	0x00050004	// 00050000, wbregs names: BETA
#define	R_GPS_GAMMA     	0x00050008	// 00050000, wbregs names: GAMMA
#define	R_GPS_STEP      	0x0005000c	// 00050000, wbregs names: STEP
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA     	0x00050000	// 00050000, wbregs names: ALPHA
#define	R_GPS_BETA      	0x00050004	// 00050000, wbregs names: BETA
#define	R_GPS_GAMMA     	0x00050008	// 00050000, wbregs names: GAMMA
#define	R_GPS_STEP      	0x0005000c	// 00050000, wbregs names: STEP
// RTC clock registers
#define	R_CLOCK         	0x00050010	// 00050010, wbregs names: CLOCK
#define	R_TIMER         	0x00050014	// 00050010, wbregs names: TIMER
#define	R_STOPWATCH     	0x00050018	// 00050010, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0005001c	// 00050010, wbregs names: ALARM, CKALARM
// RTC clock registers
#define	R_CLOCK         	0x00050010	// 00050010, wbregs names: CLOCK
#define	R_TIMER         	0x00050014	// 00050010, wbregs names: TIMER
#define	R_STOPWATCH     	0x00050018	// 00050010, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0005001c	// 00050010, wbregs names: ALARM, CKALARM
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ    	0x00050020	// 00050020, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP    	0x00050024	// 00050020, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI   	0x00050028	// 00050020, wbregs names: ERRHI
#define	R_GPSTB_ERRLO   	0x0005002c	// 00050020, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI 	0x00050030	// 00050020, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO 	0x00050034	// 00050020, wbregs names: CNTLO
#define	R_GPSTB_STEPHI  	0x00050038	// 00050020, wbregs names: STEPHI
#define	R_GPSTB_STEPLO  	0x0005003c	// 00050020, wbregs names: STEPLO
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ    	0x00050020	// 00050020, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP    	0x00050024	// 00050020, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI   	0x00050028	// 00050020, wbregs names: ERRHI
#define	R_GPSTB_ERRLO   	0x0005002c	// 00050020, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI 	0x00050030	// 00050020, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO 	0x00050034	// 00050020, wbregs names: CNTLO
#define	R_GPSTB_STEPHI  	0x00050038	// 00050020, wbregs names: STEPHI
#define	R_GPSTB_STEPLO  	0x0005003c	// 00050020, wbregs names: STEPLO
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC       	0x00060000	// 00060000, wbregs names: FPGACRC
#define	R_CFG_FAR       	0x00060004	// 00060000, wbregs names: FPGAFAR
#define	R_CFG_FDRI      	0x00060008	// 00060000, wbregs names: FPGAFDRI
#define	R_CFG_FDRO      	0x0006000c	// 00060000, wbregs names: FPGAFDRO
#define	R_CFG_CMD       	0x00060010	// 00060000, wbregs names: FPGACMD
#define	R_CFG_CTL0      	0x00060014	// 00060000, wbregs names: FPGACTL0
#define	R_CFG_MASK      	0x00060018	// 00060000, wbregs names: FPGAMASK
#define	R_CFG_STAT      	0x0006001c	// 00060000, wbregs names: FPGASTAT
#define	R_CFG_LOUT      	0x00060020	// 00060000, wbregs names: FPGALOUT
#define	R_CFG_COR0      	0x00060024	// 00060000, wbregs names: FPGACOR0
#define	R_CFG_MFWR      	0x00060028	// 00060000, wbregs names: FPGAMFWR
#define	R_CFG_CBC       	0x0006002c	// 00060000, wbregs names: FPGACBC
#define	R_CFG_IDCODE    	0x00060030	// 00060000, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS      	0x00060034	// 00060000, wbregs names: FPGAAXSS
#define	R_CFG_COR1      	0x00060038	// 00060000, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR    	0x00060040	// 00060000, wbregs names: WBSTAR
#define	R_CFG_TIMER     	0x00060044	// 00060000, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS   	0x00060058	// 00060000, wbregs names: BOOTSTS
#define	R_CFG_CTL1      	0x00060060	// 00060000, wbregs names: FPGACTL1
#define	R_CFG_BSPI      	0x0006007c	// 00060000, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR     	0x00070000	// 00070000, wbregs names: BMCR
#define	R_MDIO_BMSR     	0x00070004	// 00070000, wbregs names: BMSR
#define	R_MDIO_PHYIDR1  	0x00070008	// 00070000, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2  	0x0007000c	// 00070000, wbregs names: PHYIDR2
#define	R_MDIO_ANAR     	0x00070010	// 00070000, wbregs names: ANAR
#define	R_MDIO_ANLPAR   	0x00070014	// 00070000, wbregs names: ANLPAR
#define	R_MDIO_ANER     	0x00070018	// 00070000, wbregs names: ANER
#define	R_MDIO_ANNPTR   	0x0007001c	// 00070000, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS   	0x00070040	// 00070000, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR    	0x00070050	// 00070000, wbregs names: FCSCR
#define	R_MDIO_RECR     	0x00070054	// 00070000, wbregs names: RECR
#define	R_MDIO_PCSR     	0x00070058	// 00070000, wbregs names: PCSR
#define	R_MDIO_RBR      	0x0007005c	// 00070000, wbregs names: RBR
#define	R_MDIO_LEDCR    	0x00070060	// 00070000, wbregs names: LEDCR
#define	R_MDIO_PHYCR    	0x00070064	// 00070000, wbregs names: PHYCR
#define	R_MDIO_BTSCR    	0x00070068	// 00070000, wbregs names: BTSCR
#define	R_MDIO_CDCTRL   	0x0007006c	// 00070000, wbregs names: CDCTRL
#define	R_MDIO_EDCR     	0x00070074	// 00070000, wbregs names: EDCR
#define	R_BUSERR        	0x00080000	// 00080000, wbregs names: BUSERR
#define	R_BUSERR        	0x00080000	// 00080000, wbregs names: BUSERR
#define	R_PIC           	0x00080010	// 00080010, wbregs names: PIC
#define	R_PIC           	0x00080010	// 00080010, wbregs names: PIC
#define	R_GPIO          	0x00080020	// 00080020, wbregs names: GPIO, GPI, GPO
#define	R_GPIO          	0x00080020	// 00080020, wbregs names: GPIO, GPI, GPO
#define	R_PWRCOUNT      	0x00080030	// 00080030, wbregs names: PWRCOUNT
#define	R_PWRCOUNT      	0x00080030	// 00080030, wbregs names: PWRCOUNT
#define	R_RTCDATE       	0x00080040	// 00080040, wbregs names: RTCDATE, DATE
#define	R_RTCDATE       	0x00080040	// 00080040, wbregs names: RTCDATE, DATE
#define	R_SPIO          	0x00080050	// 00080050, wbregs names: SPIO
#define	R_SPIO          	0x00080050	// 00080050, wbregs names: SPIO
#define	R_VERSION       	0x00080060	// 00080060, wbregs names: VERSION
#define	R_VERSION       	0x00080060	// 00080060, wbregs names: VERSION
#define	R_CLRLED        	0x00080070	// 00080070, wbregs names: CLRLED
#define	R_CLRLED0       	0x00080070	// 00080070, wbregs names: CLRLED0, CLR0
#define	R_CLRLED1       	0x00080074	// 00080070, wbregs names: CLRLED1, CLR1
#define	R_CLRLED2       	0x00080078	// 00080070, wbregs names: CLRLED2, CLR2
#define	R_CLRLED3       	0x0008007c	// 00080070, wbregs names: CLRLED3, CLR3
#define	R_CLRLED        	0x00080070	// 00080070, wbregs names: CLRLED
#define	R_CLRLED0       	0x00080070	// 00080070, wbregs names: CLRLED0, CLR0
#define	R_CLRLED1       	0x00080074	// 00080070, wbregs names: CLRLED1, CLR1
#define	R_CLRLED2       	0x00080078	// 00080070, wbregs names: CLRLED2, CLR2
#define	R_CLRLED3       	0x0008007c	// 00080070, wbregs names: CLRLED3, CLR3
#define	R_BKRAM         	0x00100000	// 00100000, wbregs names: RAM


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	R_ZIPCTRL	0x00200000
#define	R_ZIPDATA	0x00200004
// #define	RESET_ADDRESS	@$[0x%08x](RESET_ADDRESS)
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
#define	BKRAMBASE	0x00100000
#define	BKRAMLEN	0x00100000
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f

#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS = @$[0x%08x](RESET_ADDRESS)
#elsif	SDRAM_ACCESS
#define	RESET_ADDRESS = @$[0x%08x](sdram.REGBASE)
#elsif	BKRAM_ACCESS
#define	RESET_ADDRESS = 0x00100000
#endif

// @REGDEFS.H.INSERT for peripherals
// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
